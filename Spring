Spring Vs Spring Boot
Spring is Lightweight framework widely used to devlope enterprise Application,it helps to create loosedly coupled application, before spring came in picture, reduce time to market
Spring boot- build on top of conventional spring framework, wieldly used to develop enterprise level application with Rest API s and CURD, Spring Boot provide 


life cycle Spring bean
 Container start and contair stop between depncies--- application.conntext.xml bean factory ---> setbeanname Instance creation-object ----> depencies injected
init method called---> in xml 
IOC-Design principle Controller for object creation--> control of object creation taken from application give to fraework, in cpntrast like class--> Spring container responsible creation and life cycle of beans
right time , right depencies injected, loosely coupled,Concept
Car class->Engine class
create object in car ---> inject engine object
Common design patterns--> Singletone design pattern--> by defulte
One instance of bean per Container. scope of spring
one instance per
Customized Configuration---> Prototype scope---> each call specifice bean created.
Factory design pattern---> Away to abstract process of creation managment, Factory manage life cycle, No logic revel to outside
Spring IOC----> Car was Class
IOC container is factory, Java configuration Object/ bean creation, factory bean, fatory method
DI-loose Coupling between classes, None objcet depend on other
Template Method pattern-Java mail sender template,JDBC or Hibernate all common things are there, JDBC trmplate, Manging Transcation,define structural flow of object.
@Componet vs @Bean
@Compont-class level,genric annotation,Automatically created and managed by Spring.
@Bean-Method level,explitly declaring bean explicitly define in Configuration class
------------------------------------------------------------------------------------------

Actuator--> Controlling Anything,Actuator additional feature, helps you control monitor
Feature to control application when push to production---> How many hits get in Rest or server hiting on production, Controlling feature
How to use Actuator use in spring boot
servername+port/health
using status u can see its UP or not, 
Add dependency as Actuator in ur pom.xml
In application.properties file add managments.endpoints.web.exposure.include =*
health, Info, what beans included what is exposed, web points

we can check beans created for perticular Controller or not
using actuator/beans
u can see actuator/env as well---> what is server port, all beans
Httptrace bean , In memory repository repository, Http trace avaliable for me.
actuator/httptrace
Create Custom endpoints
@Endpoint(id ="customActor")
@ReadOperation maps to HTTP GET
@WriteOperation maps to HTTP POST
@DELETE operation maps to HTTP DELETE
------------------------------------------------------------
Deployment
In pom.xml --> package> war</packge>
add Pulgin---> springboot-maven-Plugin
-------------------------------------------
Advantages of Yml vs Proprties file
In yml---> hirectrical structure
Server:8081
If application wants to understand in Yml file u have Properties file How u do it?
implements PropertySourceFcatory-- for YML file reading
@Values and @
--------------------------------------------------
REST API
REST Represents representational state transfer Protocol
Rest web services follows REST architectural Concepts, completely statless
Postman----->Rest API------>Server<----->DB
URI--->Hit server 
protocol---> serviceName
----------------------------------------------------------
Http Methods
 This is way to interact with ur server, REST that specifies what action  has to followed to get requested resource
Below are HTTP methods
GET:- Fetching details from server
POST:-Creation of new resourses on server
PUT:- update old/exisiting resource on the server.
DELETE: this method is used to delete the resource on the server

idopomency---> GET,Head,OPTIONS,PUT,DELETE
Notidempotancy--->POST and POST not safe or idempotent
Space handle by DB or table 
POST--->Change in memory---> hitting same url server hit n number of times and DB memory increase--->Not idempoenet
Restful web services should not keep a client state on server, this restriction called statelessness
Its responsibility of of client to pass context to server and then server 
store context to process clients further request




